"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeArgsToHideWebdriver = exports.getGeneratorDefaultOptions = void 0;
const __1 = require("..");
const getGeneratorDefaultOptions = (launchContext) => {
    const { browserPlugin, launchOptions } = launchContext;
    const options = {
        devices: ["desktop" /* desktop */],
        locales: ['en-US'],
        browsers: [getBrowserName(browserPlugin, launchOptions)],
        operatingSystems: [getOperatingSystem()],
    };
    return options;
};
exports.getGeneratorDefaultOptions = getGeneratorDefaultOptions;
const mergeArgsToHideWebdriver = (originalArgs) => {
    if (!(originalArgs === null || originalArgs === void 0 ? void 0 : originalArgs.length)) {
        return ['--disable-blink-features=AutomationControlled'];
    }
    const argumentIndex = originalArgs.findIndex((arg) => arg.startsWith('--disable-blink-features='));
    if (argumentIndex !== -1) {
        originalArgs[argumentIndex] += ',AutomationControlled';
    }
    else {
        originalArgs.push('--disable-blink-features=AutomationControlled');
    }
    return originalArgs;
};
exports.mergeArgsToHideWebdriver = mergeArgsToHideWebdriver;
const getBrowserName = (browserPlugin, launchOptions) => {
    const { library } = browserPlugin;
    let browserName;
    if (browserPlugin instanceof __1.PlaywrightPlugin) {
        browserName = library.name();
    }
    if (browserPlugin instanceof __1.PuppeteerPlugin) {
        browserName = launchOptions.product || library.product;
    }
    switch (browserName) {
        case 'webkit':
            return "safari" /* safari */;
        case 'firefox':
            return "firefox" /* firefox */;
        default:
            return "chrome" /* chrome */;
    }
};
const getOperatingSystem = () => {
    const { platform } = process;
    switch (platform) {
        case 'win32':
            // platform is win32 even for 64-bit
            return "windows" /* windows */;
        case 'darwin':
            return "macos" /* macos */;
        default:
            // consider everything else a linux
            return "linux" /* linux */;
    }
};
//# sourceMappingURL=utils.js.map